@using LibraryBooks.Dependencies
@using LibraryBooks.Entities;

@{
    Layout = "~/Pages/Layout/_BasicLayout.cshtml";

    var bookBll = DependencyResolver.Instance.BookLogic;
    var book = bookBll.GetById(int.Parse(Request["id"]));
    var authorBll = DependencyResolver.Instance.AuthorLogic;
    var authors = authorBll.GetAll();

    PageData["Title"] = "Edit Author";

    if (!User.IsInRole("admin"))
    {
        Response.Redirect("~/");
    }
}
<h3>Изменить книгу : @book.Title </h3>
<form method="post" class="row g-3 needs-validation" style="margin: 20px; display: inline-block" novalidate>
    <div class="input-group mb-3">
        <span class="input-group-text" id="basic-addon1">Title</span>
        <input type="text" name="Title" class="form-control" placeholder="Title" aria-label="Title" aria-describedby="basic-addon1" 
               value="@book.Title" pattern="^[A-Za-z0-9\s\-_,\.;:()]+$" required>
        <div class="invalid-feedback">
            Please choose a Title.
        </div>
    </div>
    <div class="input-group mb-3">
        <span class="input-group-text" id="basic-addon1">AuthorFullName</span>
        <input type="text" list="datalistOptionsAuthors" name="AuthorFullName" class="form-control" placeholder="Surname F.S." aria-label="AuthorFullName" aria-describedby="basic-addon1" 
               value="@book.AuthorFullName" pattern="^[a-zA-Zа-яА-Я]+ [a-zA-Zа-яА-Я]\.[a-zA-Zа-яА-Я]\." required>
        <datalist id="datalistOptionsAuthors">
            @foreach (var item in authors)
            {
                <option value="@(item.FullName)" />
            }
        </datalist>
        <div class="invalid-feedback">
            Please choose a AuthorFullName with format "Surname F.S.".
        </div>
    </div>
    <div class="input-group mb-3">
        <span class="input-group-text" id="basic-addon1">Page</span>
        <input type="number" name="Page" class="form-control" placeholder="Page" aria-label="Page" aria-describedby="basic-addon1"
               min="1" value="@book.Page" required>
        <div class="invalid-feedback">
            Please choose a Number Page.
        </div>
    </div>
    <div class="input-group mb-3">
        <span class="input-group-text" id="basic-addon1">Description</span>
        <textarea type="text" name="Description" class="form-control" placeholder="Description" aria-label="Description" aria-describedby="basic-addon1"
               value="@book.Description" style="width:400px" maxlength="500" required></textarea>
        <div class="invalid-feedback">
            Please choose a Description.
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Edit</button>
</form>

@if (IsPost)
{
    try
    {
        book.Edit(
            newTitle: Request["Title"],
            newAuthorFullName: Request["AuthorFullName"],
            newPage: int.Parse(Request["Page"]),
            newDescription: Request["Description"]);

        if (!authorBll.Exist(book.AuthorFullName))
        {
            authorBll.Add(book.AuthorFullName);
        }
        book.EditIdAuthor(authorBll.GetByFullName(book.AuthorFullName).Id);

        bookBll.Edit(book);

        @RenderPage("~/Partial/_Succes.cshtml", new { info = $"Книга \"{book.Title}\" изменена!!!" })
    }
    catch (Exception ex)
    {
        @RenderPage("~/Partial/_Error.cshtml", new { info = "Книга не изменена!!!", exception = ex.Message })
    }
}

<script>
    $(function () {
        $('input[type="text"]').change(function () {
            this.value = $.trim(this.value);
        });
    });
    $('.btn').click(function (event) {

        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        var forms = document.querySelectorAll('.needs-validation')

        // Loop over them and prevent submission
        Array.prototype.slice.call(forms)
            .forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }

                    form.classList.add('was-validated')
                }, false)
            })
    });
</script>