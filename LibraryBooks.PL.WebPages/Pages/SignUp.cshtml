@using LibraryBooks.Dependencies
@using LibraryBooks.Entities;

@{
    Layout = "~/Pages/Layout/_GuestLayout.cshtml";

    var accountBll = DependencyResolver.Instance.AccountLogic;

    PageData["Title"] = "SignUp";
}
<h3>Регистрация</h3>
<form method="post" class="row g-3 needs-validation" style="margin: 20px; width:300px" novalidate>
    <div class="input-group mb-3">
        <span class="input-group-text" id="basic-addon1">Login</span>
        <input type="text" name="Login" class="form-control" placeholder="Login" aria-label="Login" aria-describedby="basic-addon1"
              maxlength="32" pattern="^[\w]{4,32}$" required>
        <div class="invalid-feedback">
            Please choose a Login with length 4-32.
        </div>
    </div>
    <div class="input-group mb-3">
        <span class="input-group-text" id="basic-addon1">Password</span>
        <input type="password" name="Password" class="form-control" placeholder="Password" aria-label="Password" aria-describedby="basic-addon1"
              maxlength="32" pattern="^[\w]{4,32}$" required>
        <div class="invalid-feedback">
            Please choose a Password with length 4-32.
        </div>
    </div>
    <div class="input-group mb-3">
        <span class="input-group-text" id="basic-addon1">SurName</span>
        <input type="text" name="SurName" class="form-control" placeholder="SurName" aria-label="SurName" aria-describedby="basic-addon1"
               pattern="^[a-zA-Zа-яА-Я]+$" required>
        <div class="invalid-feedback">
            Please choose a SurName.
        </div>
    </div>
    <div class="input-group mb-3">
        <span class="input-group-text" id="basic-addon1">FirstName</span>
        <input type="text" name="FirstName" class="form-control" placeholder="FirstName" aria-label="FirstName" aria-describedby="basic-addon1" 
               pattern="^[a-zA-Zа-яА-Я]+$" required>
        <div class="invalid-feedback">
            Please choose a FirstName.
        </div>
    </div>
    <div class="input-group mb-3">
        <span class="input-group-text" id="basic-addon1">SecondName</span>
        <input type="text" name="SecondName" class="form-control" placeholder="SecondName" aria-label="Username" aria-describedby="basic-addon1" 
               pattern="^[a-zA-Zа-яА-Я]+$" required>
        <div class="invalid-feedback">
            Please choose a SecondName.
        </div>
    </div>
    <div class="input-group mb-3">
        <span class="input-group-text" id="basic-addon1">DateOfBirth</span>
        <input type="date" name="DateOfBirth" class="form-control" placeholder="DateOfBirth" aria-label="DateOfBirth" aria-describedby="basic-addon1"
               max="@DateTime.Now.ToString("yyyy-MM-dd")" required>
    </div>
    <div class="input-group mb-3">
        <span class="input-group-text" id="basic-addon1">PhoneNumber</span>
        <input type="tel" name="PhoneNumber" class="form-control" placeholder="+7-xxx-xxxx-xxxx" aria-label="PhoneNumber" aria-describedby="basic-addon1"
               pattern="^\+7-[0-9]{3}-[0-9]{3}-[0-9]{4}$" required>
        <div class="invalid-feedback">
            Please choose valid format : +7-xxx-xxxx-xxxx.
        </div>
    </div>

    <button type="submit" class="btn btn-primary">Add</button>
</form>

@if (IsPost)
{
    try
    {
        string login = Request["Login"];
        string pass = Request["Password"];
        if (accountBll.Exist(login))
        {
            @RenderPage("~/Partial/_Error.cshtml", new { info = "Пользователь с таким логином уже существует!!!" });
            return;
        }

        var userInfo = new User(
            surName: Request["SurName"],
            firstName: Request["FirstName"],
            secondName: Request["SecondName"],
            dateOfBirth: Request["DateOfBirth"].AsDateTime(),
            phone: Request["PhoneNumber"]);
        accountBll.Create(
            login: login,
            password: pass,
            userInfo: userInfo);


        @RenderPage("~/Partial/_Succes.cshtml", new { info = $"Пользователь \"{userInfo.ShortFullName}\" зарегистрирован!!!" })
    }
    catch (Exception ex)
    {
        @RenderPage("~/Partial/_Error.cshtml", new { info = "Пользователь не зарегистрирован!!!", exception = ex.Message })
    }
}

<script>
    $(function () {
        $('input[type="text"]').change(function () {
            this.value = $.trim(this.value);
        });
    });
    $('.btn').click(function (event) {

        // Fetch all the forms we want to apply custom Bootstrap validation styles to
        var forms = document.querySelectorAll('.needs-validation')

        // Loop over them and prevent submission
        Array.prototype.slice.call(forms)
            .forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }

                    form.classList.add('was-validated')
                }, false)
            })
    });
</script>